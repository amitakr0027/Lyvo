import jsPDF from "jspdf"

export interface ProjectFeature {
  title: string
  description: string
  category: "core" | "ai" | "advanced"
}

export const generateUserGuidePDF = () => {
  const doc = new jsPDF()

  // Header
  doc.setFontSize(24)
  doc.setTextColor(0, 150, 136) // Teal color
  doc.text("Lyvo - User Guide", 20, 30)

  doc.setFontSize(12)
  doc.setTextColor(100, 100, 100)
  doc.text("AI-Powered Video Conferencing Platform", 20, 40)

  // Line separator
  doc.setDrawColor(0, 150, 136)
  doc.line(20, 45, 190, 45)

  let yPosition = 60

  // Getting Started Section
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Getting Started", 20, yPosition)
  yPosition += 15

  doc.setFontSize(10)
  doc.setTextColor(60, 60, 60)
  const gettingStartedSteps = [
    "1. Sign up with your email or Google account",
    "2. Complete your profile setup in the Profile section",
    '3. Create your first meeting using the "New Meeting" button',
    "4. Invite participants by sharing the meeting link or code",
    '5. Join meetings using the "Join Meeting" option',
    "6. Explore AI features like summaries and live translation",
  ]

  gettingStartedSteps.forEach((step) => {
    doc.text(step, 25, yPosition)
    yPosition += 8
  })

  yPosition += 10

  // Core Features Section
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Core Features", 20, yPosition)
  yPosition += 15

  const coreFeatures = [
    "Real-time Video Conferencing: High-quality video and audio calls",
    "Screen Sharing: Share your screen with participants",
    "Chat Messaging: Send messages during meetings",
    "Meeting Recording: Record meetings for later review",
    "Participant Management: Control who can join and participate",
  ]

  doc.setFontSize(10)
  coreFeatures.forEach((feature) => {
    const lines = doc.splitTextToSize(feature, 160)
    lines.forEach((line: string) => {
      doc.text(line, 25, yPosition)
      yPosition += 6
    })
    yPosition += 4
  })

  // AI Features Section
  yPosition += 10
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("AI-Powered Features", 20, yPosition)
  yPosition += 15

  const aiFeatures = [
    "Smart Meeting Summaries: Automatic meeting transcription and summary",
    "Action Items Extraction: AI identifies and assigns tasks to participants",
    "Late Joiner Recap: 60-second AI-generated recap for late participants",
    "Real-time Translation: Live subtitles in multiple languages",
    "Smart Scheduling: AI-powered meeting optimization",
  ]

  doc.setFontSize(10)
  aiFeatures.forEach((feature) => {
    const lines = doc.splitTextToSize(feature, 160)
    lines.forEach((line: string) => {
      doc.text(line, 25, yPosition)
      yPosition += 6
    })
    yPosition += 4
  })

  // New page for troubleshooting
  doc.addPage()
  yPosition = 30

  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Troubleshooting", 20, yPosition)
  yPosition += 15

  const troubleshooting = [
    "Camera/Microphone Issues:",
    "• Check browser permissions for camera and microphone access",
    "• Ensure no other applications are using your camera/microphone",
    "• Try refreshing the page or restarting your browser",
    "",
    "Connection Problems:",
    "• Check your internet connection stability",
    "• Try switching to a different network if available",
    "• Disable VPN if you are using one",
    "",
    "Audio/Video Quality Issues:",
    "• Close unnecessary applications to free up system resources",
    "• Check your internet bandwidth",
    "• Try turning off video if audio is more important",
  ]

  doc.setFontSize(10)
  troubleshooting.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  // Footer
  doc.setFontSize(8)
  doc.setTextColor(150, 150, 150)
  doc.text("Generated by Lyvo - AI-Powered Meetings", 20, 280)
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 285)

  return doc
}

export const generateVideoSupportPDF = () => {
  const doc = new jsPDF()

  // Header
  doc.setFontSize(24)
  doc.setTextColor(0, 150, 136)
  doc.text("Lyvo - Video Support Guide", 20, 30)

  doc.setFontSize(12)
  doc.setTextColor(100, 100, 100)
  doc.text("Comprehensive Video Conferencing Support", 20, 40)

  doc.setDrawColor(0, 150, 136)
  doc.line(20, 45, 190, 45)

  let yPosition = 60

  // Video Setup Section
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Video Setup & Configuration", 20, yPosition)
  yPosition += 15

  const videoSetup = [
    "Camera Requirements:",
    "• Minimum resolution: 720p HD",
    "• Recommended: 1080p Full HD or higher",
    "• USB webcams, built-in laptop cameras, or external cameras supported",
    "",
    "Browser Compatibility:",
    "• Chrome (recommended): Version 88+",
    "• Firefox: Version 85+",
    "• Safari: Version 14+",
    "• Edge: Version 88+",
    "",
    "System Requirements:",
    "• Windows 10+, macOS 10.14+, or Linux Ubuntu 18.04+",
    "• Minimum 4GB RAM (8GB recommended)",
    "• Stable internet connection (minimum 1 Mbps upload/download)",
  ]

  doc.setFontSize(10)
  doc.setTextColor(60, 60, 60)
  videoSetup.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  yPosition += 10

  // Video Controls Section
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Video Controls & Features", 20, yPosition)
  yPosition += 15

  const videoControls = [
    "Basic Controls:",
    "• Camera On/Off: Toggle your video feed",
    "• Microphone Mute/Unmute: Control audio input",
    "• Screen Share: Share your entire screen or specific applications",
    "• Recording: Start/stop meeting recording (host only)",
    "",
    "Advanced Features:",
    "• Virtual Backgrounds: Apply background effects",
    "• Picture-in-Picture: Minimize meeting window while multitasking",
    "• Grid View: See all participants in a grid layout",
    "• Speaker View: Focus on the active speaker",
    "",
    "Quality Settings:",
    "• Auto-adjust quality based on connection",
    "• Manual quality selection (Low, Medium, High)",
    "• Bandwidth optimization for poor connections",
  ]

  doc.setFontSize(10)
  videoControls.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  // New page for troubleshooting
  doc.addPage()
  yPosition = 30

  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Video Troubleshooting", 20, yPosition)
  yPosition += 15

  const videoTroubleshooting = [
    "Common Video Issues:",
    "",
    "1. Camera Not Working:",
    "• Check if camera is being used by another application",
    "• Restart browser and grant camera permissions",
    "• Try a different browser or incognito mode",
    "• Update camera drivers",
    "",
    "2. Poor Video Quality:",
    "• Check internet connection speed",
    "• Close bandwidth-heavy applications",
    "• Reduce video quality in settings",
    "• Ensure good lighting conditions",
    "",
    "3. Video Lag or Freezing:",
    "• Restart your router/modem",
    "• Switch to wired connection if possible",
    "• Close unnecessary browser tabs",
    "• Update your browser to the latest version",
    "",
    "4. Audio-Video Sync Issues:",
    "• Refresh the meeting page",
    "• Leave and rejoin the meeting",
    "• Check for browser updates",
    "• Restart your device if issues persist",
  ]

  doc.setFontSize(10)
  videoTroubleshooting.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  // Footer
  doc.setFontSize(8)
  doc.setTextColor(150, 150, 150)
  doc.text("Lyvo Video Support - For technical assistance: support@lyvo.com", 20, 280)
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 285)

  return doc
}

export const generateFeaturesPDF = () => {
  const doc = new jsPDF()

  // Header
  doc.setFontSize(24)
  doc.setTextColor(0, 150, 136)
  doc.text("Lyvo - Complete Features Guide", 20, 30)

  doc.setFontSize(12)
  doc.setTextColor(100, 100, 100)
  doc.text("Comprehensive Feature Documentation", 20, 40)

  doc.setDrawColor(0, 150, 136)
  doc.line(20, 45, 190, 45)

  let yPosition = 60

  // Core Meeting Features
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Core Meeting Features", 20, yPosition)
  yPosition += 15

  const coreFeatures = [
    "Real-time Video Conferencing:",
    "• HD video quality up to 1080p",
    "• Support for up to 100 participants",
    "• WebRTC technology for low latency",
    "• Automatic quality adjustment",
    "",
    "Audio Management:",
    "• Crystal clear audio with noise cancellation",
    "• Push-to-talk functionality",
    "• Audio-only mode for bandwidth saving",
    "• Multiple microphone support",
    "",
    "Screen Sharing:",
    "• Full screen or application-specific sharing",
    "• Remote control capabilities",
    "• Annotation tools during screen share",
    "• Multiple screen support",
    "",
    "Meeting Controls:",
    "• Host controls (mute all, remove participants)",
    "• Waiting room functionality",
    "• Meeting lock/unlock",
    "• Participant permissions management",
  ]

  doc.setFontSize(10)
  doc.setTextColor(60, 60, 60)
  coreFeatures.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  // New page for AI features
  doc.addPage()
  yPosition = 30

  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("AI-Powered Features", 20, yPosition)
  yPosition += 15

  const aiFeatures = [
    "Smart Meeting Summaries:",
    "• Automatic transcription of entire meeting",
    "• AI-generated summary with key points",
    "• Action items extraction and assignment",
    "• Searchable meeting archives",
    "",
    "Late Joiner Recap:",
    "• 60-second AI-generated audio recap",
    "• Visual summary of key discussion points",
    "• Automatic delivery to late participants",
    "• Customizable recap length",
    "",
    "Real-time Multi-Language Subtitles:",
    "• Live speech-to-text conversion",
    "• Translation to 50+ languages",
    "• Customizable subtitle appearance",
    "• Offline subtitle download",
    "",
    "AI Meeting Assistant:",
    "• Smart scheduling suggestions",
    "• Participant availability detection",
    "• Meeting optimization recommendations",
    "• Automated follow-up reminders",
  ]

  doc.setFontSize(10)
  aiFeatures.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  yPosition += 10

  // Advanced Features
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Advanced Features", 20, yPosition)
  yPosition += 15

  const advancedFeatures = [
    "Recording & Playback:",
    "• Cloud recording with unlimited storage",
    "• Local recording option",
    "• Automatic transcription of recordings",
    "• Video editing and trimming tools",
    "",
    "Integration Capabilities:",
    "• Calendar integration (Google, Outlook)",
    "• CRM integration (Salesforce, HubSpot)",
    "• Project management tools (Slack, Trello)",
    "• API access for custom integrations",
    "",
    "Security & Privacy:",
    "• End-to-end encryption",
    "• Waiting room security",
    "• Meeting passwords and access codes",
    "• GDPR and HIPAA compliance",
    "",
    "Analytics & Reporting:",
    "• Meeting attendance tracking",
    "• Engagement metrics and insights",
    "• Usage analytics and trends",
    "• Custom reporting dashboards",
  ]

  doc.setFontSize(10)
  advancedFeatures.forEach((item) => {
    if (item === "") {
      yPosition += 5
    } else {
      const lines = doc.splitTextToSize(item, 160)
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition)
        yPosition += 6
      })
    }
  })

  // Footer
  doc.setFontSize(8)
  doc.setTextColor(150, 150, 150)
  doc.text("Lyvo Features Guide - Visit lyvo.com for latest updates", 20, 280)
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 285)

  return doc
}
